//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GGDTestCenterAdmin.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ggd", Namespace="http://schemas.datacontract.org/2004/07/CoronaHealthService")]
    [System.SerializableAttribute()]
    public partial class Ggd : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AvailableCapacityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GgdCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GgdCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GGDTestCenterAdmin.ServiceReference1.ServicesProvided ServicesProvidedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestCenterAddressField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AvailableCapacity {
            get {
                return this.AvailableCapacityField;
            }
            set {
                if ((this.AvailableCapacityField.Equals(value) != true)) {
                    this.AvailableCapacityField = value;
                    this.RaisePropertyChanged("AvailableCapacity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GgdCity {
            get {
                return this.GgdCityField;
            }
            set {
                if ((object.ReferenceEquals(this.GgdCityField, value) != true)) {
                    this.GgdCityField = value;
                    this.RaisePropertyChanged("GgdCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GgdCode {
            get {
                return this.GgdCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.GgdCodeField, value) != true)) {
                    this.GgdCodeField = value;
                    this.RaisePropertyChanged("GgdCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GGDTestCenterAdmin.ServiceReference1.ServicesProvided ServicesProvided {
            get {
                return this.ServicesProvidedField;
            }
            set {
                if ((this.ServicesProvidedField.Equals(value) != true)) {
                    this.ServicesProvidedField = value;
                    this.RaisePropertyChanged("ServicesProvided");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestCenterAddress {
            get {
                return this.TestCenterAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.TestCenterAddressField, value) != true)) {
                    this.TestCenterAddressField = value;
                    this.RaisePropertyChanged("TestCenterAddress");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServicesProvided", Namespace="http://schemas.datacontract.org/2004/07/CoronaHealthService")]
    public enum ServicesProvided : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CoronaTest = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Vaccination = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        YouthCare = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HealthResearch = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IReservationService")]
    public interface IReservationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReservationService/GetServiceName", ReplyAction="http://tempuri.org/IReservationService/GetServiceNameResponse")]
        string GetServiceName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReservationService/GetServiceName", ReplyAction="http://tempuri.org/IReservationService/GetServiceNameResponse")]
        System.Threading.Tasks.Task<string> GetServiceNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReservationService/GetAvailableTestLocations", ReplyAction="http://tempuri.org/IReservationService/GetAvailableTestLocationsResponse")]
        System.Collections.Generic.List<GGDTestCenterAdmin.ServiceReference1.Ggd> GetAvailableTestLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReservationService/GetAvailableTestLocations", ReplyAction="http://tempuri.org/IReservationService/GetAvailableTestLocationsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GGDTestCenterAdmin.ServiceReference1.Ggd>> GetAvailableTestLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReservationService/MakeReservation", ReplyAction="http://tempuri.org/IReservationService/MakeReservationResponse")]
        bool MakeReservation(string centerLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReservationService/MakeReservation", ReplyAction="http://tempuri.org/IReservationService/MakeReservationResponse")]
        System.Threading.Tasks.Task<bool> MakeReservationAsync(string centerLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReservationService/CancelReservation", ReplyAction="http://tempuri.org/IReservationService/CancelReservationResponse")]
        bool CancelReservation(string centerLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReservationService/CancelReservation", ReplyAction="http://tempuri.org/IReservationService/CancelReservationResponse")]
        System.Threading.Tasks.Task<bool> CancelReservationAsync(string centerLocation);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReservationServiceChannel : GGDTestCenterAdmin.ServiceReference1.IReservationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReservationServiceClient : System.ServiceModel.ClientBase<GGDTestCenterAdmin.ServiceReference1.IReservationService>, GGDTestCenterAdmin.ServiceReference1.IReservationService {
        
        public ReservationServiceClient() {
        }
        
        public ReservationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReservationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReservationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReservationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetServiceName() {
            return base.Channel.GetServiceName();
        }
        
        public System.Threading.Tasks.Task<string> GetServiceNameAsync() {
            return base.Channel.GetServiceNameAsync();
        }
        
        public System.Collections.Generic.List<GGDTestCenterAdmin.ServiceReference1.Ggd> GetAvailableTestLocations() {
            return base.Channel.GetAvailableTestLocations();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GGDTestCenterAdmin.ServiceReference1.Ggd>> GetAvailableTestLocationsAsync() {
            return base.Channel.GetAvailableTestLocationsAsync();
        }
        
        public bool MakeReservation(string centerLocation) {
            return base.Channel.MakeReservation(centerLocation);
        }
        
        public System.Threading.Tasks.Task<bool> MakeReservationAsync(string centerLocation) {
            return base.Channel.MakeReservationAsync(centerLocation);
        }
        
        public bool CancelReservation(string centerLocation) {
            return base.Channel.CancelReservation(centerLocation);
        }
        
        public System.Threading.Tasks.Task<bool> CancelReservationAsync(string centerLocation) {
            return base.Channel.CancelReservationAsync(centerLocation);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAdminService", CallbackContract=typeof(GGDTestCenterAdmin.ServiceReference1.IAdminServiceCallback))]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetGgdInfo", ReplyAction="http://tempuri.org/IAdminService/GetGgdInfoResponse")]
        System.Collections.Generic.List<GGDTestCenterAdmin.ServiceReference1.Ggd> GetGgdInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetGgdInfo", ReplyAction="http://tempuri.org/IAdminService/GetGgdInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<GGDTestCenterAdmin.ServiceReference1.Ggd>> GetGgdInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdminService/IncreaseCapacity")]
        void IncreaseCapacity(string centerLocation);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAdminService/IncreaseCapacity")]
        System.Threading.Tasks.Task IncreaseCapacityAsync(string centerLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/Connect", ReplyAction="http://tempuri.org/IAdminService/ConnectResponse")]
        void Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/Connect", ReplyAction="http://tempuri.org/IAdminService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/Disconnect", ReplyAction="http://tempuri.org/IAdminService/DisconnectResponse")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/Disconnect", ReplyAction="http://tempuri.org/IAdminService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddAdditionalCoronaTestLocation", ReplyAction="http://tempuri.org/IAdminService/AddAdditionalCoronaTestLocationResponse")]
        void AddAdditionalCoronaTestLocation(string ggdCode, string ggdCity, int availableCapacity, string testCenterAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddAdditionalCoronaTestLocation", ReplyAction="http://tempuri.org/IAdminService/AddAdditionalCoronaTestLocationResponse")]
        System.Threading.Tasks.Task AddAdditionalCoronaTestLocationAsync(string ggdCode, string ggdCity, int availableCapacity, string testCenterAddress);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/OnIncreaseCapacity", ReplyAction="http://tempuri.org/IAdminService/OnIncreaseCapacityResponse")]
        void OnIncreaseCapacity();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/OnUpdateLocations", ReplyAction="http://tempuri.org/IAdminService/OnUpdateLocationsResponse")]
        void OnUpdateLocations();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : GGDTestCenterAdmin.ServiceReference1.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.DuplexClientBase<GGDTestCenterAdmin.ServiceReference1.IAdminService>, GGDTestCenterAdmin.ServiceReference1.IAdminService {
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<GGDTestCenterAdmin.ServiceReference1.Ggd> GetGgdInfo() {
            return base.Channel.GetGgdInfo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<GGDTestCenterAdmin.ServiceReference1.Ggd>> GetGgdInfoAsync() {
            return base.Channel.GetGgdInfoAsync();
        }
        
        public void IncreaseCapacity(string centerLocation) {
            base.Channel.IncreaseCapacity(centerLocation);
        }
        
        public System.Threading.Tasks.Task IncreaseCapacityAsync(string centerLocation) {
            return base.Channel.IncreaseCapacityAsync(centerLocation);
        }
        
        public void Connect() {
            base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void Disconnect() {
            base.Channel.Disconnect();
        }
        
        public System.Threading.Tasks.Task DisconnectAsync() {
            return base.Channel.DisconnectAsync();
        }
        
        public void AddAdditionalCoronaTestLocation(string ggdCode, string ggdCity, int availableCapacity, string testCenterAddress) {
            base.Channel.AddAdditionalCoronaTestLocation(ggdCode, ggdCity, availableCapacity, testCenterAddress);
        }
        
        public System.Threading.Tasks.Task AddAdditionalCoronaTestLocationAsync(string ggdCode, string ggdCity, int availableCapacity, string testCenterAddress) {
            return base.Channel.AddAdditionalCoronaTestLocationAsync(ggdCode, ggdCity, availableCapacity, testCenterAddress);
        }
    }
}
